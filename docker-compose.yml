version: '3.2'

services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
      # (!) TLS certificates. Generate using instructions from tls/README.md.
      - type: bind
        source: ./tls/elasticsearch/elasticsearch.p12
        target: /usr/share/elasticsearch/config/elasticsearch.p12
        read_only: true
      - type: bind
        source: ./tls/elasticsearch/http.p12
        target: /usr/share/elasticsearch/config/http.p12
        read_only: true
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
      - type: bind
        source: ./logstash/logstash-input-mongodb/
        target: /etc/logstash/conf.d/
        read_only: true
      # (!) CA certificate. Generate using instructions from tls/README.md
      - type: bind
        source: ./tls/kibana/elasticsearch-ca.pem
        target: /usr/share/logstash/config/elasticsearch-ca.pem
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
      # (!) CA certificate. Generate using instructions from tls/README.md.
      - type: bind
        source: ./tls/kibana/elasticsearch-ca.pem
        target: /usr/share/kibana/config/elasticsearch-ca.pem
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  mongodb:
    image: mongo:3.6
    ports:
      - "27017:27017"
    command: mongod
    restart: always
  bigchaindb:
    depends_on:
      - mongodb
      - tendermint
    build:
      context: ./bigchaindb
      dockerfile: Dockerfile-dev
    volumes:
      - ./bigchaindb/bigchaindb:/usr/src/app/bigchaindb
      - ./bigchaindb/tests:/usr/src/app/tests
      - ./bigchaindb/docs:/usr/src/app/docs
      - ./bigchiandb/htmlcov:/usr/src/app/htmlcov
      - ./bigchaindb/setup.py:/usr/src/app/setup.py
      - ./bigchaindb/setup.cfg:/usr/src/app/setup.cfg
      - ./bigchaindb/pytest.ini:/usr/src/app/pytest.ini
      - ./bigchaindb/tox.ini:/usr/src/app/tox.ini
    environment:
      BIGCHAINDB_DATABASE_BACKEND: localmongodb
      BIGCHAINDB_DATABASE_HOST: mongodb
      BIGCHAINDB_DATABASE_PORT: 27017
      BIGCHAINDB_SERVER_BIND: 0.0.0.0:9984
      BIGCHAINDB_WSSERVER_HOST: 0.0.0.0
      BIGCHAINDB_WSSERVER_ADVERTISED_HOST: bigchaindb
      BIGCHAINDB_TENDERMINT_HOST: tendermint
      BIGCHAINDB_TENDERMINT_PORT: 26657
    ports:
      - "9984:9984"
      - "9985:9985"
      - "26658"
    healthcheck:
      test: ["CMD", "bash", "-c", "curl http://bigchaindb:9984 && curl http://tendermint:26657/abci_query"]
      interval: 3s
      timeout: 5s
      retries: 3
    command: '.ci/entrypoint.sh'
    restart: always
  tendermint:
    image: tendermint/tendermint:v0.31.5
    # volumes:
    #   - ./tmdata:/tendermint
    entrypoint: ''
    ports:
      - "26656:26656"
      - "26657:26657"
    command: sh -c "tendermint init && tendermint node --consensus.create_empty_blocks=false --proxy_app=tcp://bigchaindb:26658"
    restart: always
  bdb:
    image: busybox
    depends_on:
      bigchaindb:
        condition: service_healthy


  # curl client to check the health of development env
  curl-client:
    image: appropriate/curl
    command: /bin/sh -c "curl -s http://bigchaindb:9984/ > /dev/null && curl -s http://tendermint:26657/ > /dev/null"

  # BigchainDB setup to do acceptance testing with Python
  python-acceptance:
    build:
      context: ./bigchaindb
      dockerfile: ./acceptance/python/Dockerfile
    volumes:
      - ./bigchaindb/acceptance/python/docs:/docs
      - ./bigchaindb/acceptance/python/src:/src
    environment:
      - BIGCHAINDB_ENDPOINT=bigchaindb

  # Build docs only
  # docker-compose build bdocs
  # docker-compose up -d bdocs
  bdocs:
    depends_on:
      - vdocs
    build:
      context: ./bigchaindb
      dockerfile: Dockerfile-dev
      args:
        backend: localmongodb
    volumes:
      - .:/usr/src/app/
    command: make -C docs/root html
  vdocs:
    image: nginx
    ports:
      - '33333:80'
    volumes:
      - ./docs/root/build/html:/usr/share/nginx/html
networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
  mongodb:
  bigchaindb:
  bdocs:
  vdocs:
  python-acceptance:
  bdb:
  tendermint:
  